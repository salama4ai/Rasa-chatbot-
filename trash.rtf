- intent: affirm
  examples: |
    - yes
    - y
    - ya
    - indeed
    - of course
    - sounds good
    - correct
    - ok
    - true
    - that is true
    - that's true
    - sure
    - right
    - yapp
    - all right
    - okay
    - okey
    - yeah
    - yep
            
- intent: deny
  examples: |
    - no
    - n
    - never
    - I don't think so
    - don't like that
    - no way
    - not really
    - false
    - wrong
    - nope
    - nop
    - incorrect
    - not at all
    - noo
    - impossible 
    - i didn't 
    - no i did not
    - not true    
    - you are mistaken
    - mistaken
    
    
    
    
    
    

  
 
- story: interactive_story_1
  steps:
  - intent: greet
  - action: utter_greet
  - action: utter_offer
  - intent: user_question
    entities:
    - country: usa
    - pop_cap: population
  - slot_was_set:
    - pop_cap: population
  - slot_was_set:
    - country: usa
  - action: validate_user_question
  - action: action_answer
  - intent: user_question
    entities:
    - pop_cap: capital
    - country: russia
  - slot_was_set:
    - pop_cap: capital
  - slot_was_set:
    - country: russia
  - action: validate_user_question
  - action: action_answer
  - intent: user_question
    entities:
    - pop_cap: population
  - action: validate_user_question
  - action: action_answer
  - intent: user_question
    entities:
    - country: finland
  - slot_was_set:
    - country: finland
  - action: validate_user_question
  - action: action_answer
  - intent: user_question
    entities:
    - country: japan
    - pop_cap: population
  - slot_was_set:
    - pop_cap: population
  - slot_was_set:
    - country: japan
  - action: validate_user_question
  - action: action_answer
  - intent: bot_challenge
  - action: utter_iamabot

- story: interactive_story_2
  steps:
  - intent: greet
  - action: utter_greet
  - action: utter_offer
  - intent: user_question
    entities:
    - country: usa
    - pop_cap: population
  - slot_was_set:
    - pop_cap: population
  - slot_was_set:
    - country: usa
  - action: validate_user_question
  - action: action_answer
  - intent: user_question
    entities:
    - pop_cap: capital
    - country: russia
  - slot_was_set:
    - pop_cap: capital
  - slot_was_set:
    - country: russia
  - action: validate_user_question
  - action: action_answer
  - intent: user_question
    entities:
    - pop_cap: population
  - action: validate_user_question
  - action: action_answer
  - intent: user_question
    entities:
    - country: finland
  - slot_was_set:
    - country: finland
  - action: validate_user_question
  - action: action_answer
  - intent: user_question
    entities:
    - country: japan
    - pop_cap: population
  - slot_was_set:
    - pop_cap: population
  - slot_was_set:
    - country: japan
  - action: validate_user_question
  - action: action_answer
  
  
  
          # check if the country slot value is in our database  
          else:
              get_countries = requests.get(f"{url}Countries").json()            
              try:
                  if get_countries["success"]==1:
                      if country.title() not in get_countries["body"].values():
                          dispatcher.utter_message(response = "utter_not_found")
                          return {"country": None}  
                      else:
                          return {"country", country.title()} 
                  else:
                      dispatcher.utter_message(response = "utter_server_failure")
                      return {"country": None}                     
              except:
                  dispatcher.utter_message(response = "utter_server_failure")
                  return {"country": None}  

        
        if not pop_cap:
            dispatcher.utter_message(response = "utter_ask_pop_cap", country = f"{country}")  
            return
            
        elif not country:
            dispatcher.utter_message(response = "utter_ask_country")
            return
            
            


countries_cap = {
    "USA":"Washington, D.C.",
    "Greece": "Athens",
    "Sweden": "Stockholm",
    "Australia": "Canberra",
    "Finland": "Helsinki",
    "Japan": "Tokyo",
    "Russia": "Moscow",
    "India": "New Delhi"}

countries_pop = {
    "USA": "330",
    "Greece": "10.7",
    "Sweden": "10.35",
    "Australia": "25.7",
    "Finland": "5.5",
    "Japan": "126",
    "Russia": "144",
    "India": "1380"}            
    
    
    
    

class FutureActionAnswer(Action):

    def name(self) -> Text:
        return "future_action_answer"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, 
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
         
        country = tracker.get_slot("country")
        pop_cap = tracker.get_slot("pop_cap")
        payload_cap = {}        
        

        # the action when the country is selected and pop_cap=capital
        print("action_answer")
        if pop_cap=="Capital":                         
            try:                
                get_capital = requests.get(f"{base_url}Capital", 
                                           timeout=timeout, params=payload_cap)
                # check if the status_code is ok, i.e less than 400 
                if not get_capital.ok:
                    raise Exception
                cap = get_capital.json()["body"]["capital"]
                dispatcher.utter_message(response = "utter_answer_cap", 
                                         country = country, cap = cap)
            except:
                dispatcher.utter_message(response = "utter_server_failure")
                
                
                        
        # the action when the country is selected and pop_cap=population
        elif pop_cap=="Population":
            try:
                get_population = requests.get(f"{base_url}Population", 
                                              timeout=timeout, params=payload_pop)                                              
                # check if the status_code is ok, i.e less than 400 
                if not get_population.ok:
                    raise Exception
                pop = get_population.json()["body"]["population"]
                dispatcher.utter_message(response = "utter_answer_pop", 
                                         country = country, pop = pop)
            except:
                dispatcher.utter_message(response = "utter_server_failure")                       
        return    